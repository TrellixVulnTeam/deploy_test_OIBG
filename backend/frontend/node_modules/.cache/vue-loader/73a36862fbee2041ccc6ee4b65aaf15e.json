{"remainingRequest":"C:\\test\\S05P13B202-develope\\S05P13B202-develope\\backend\\frontend\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\test\\S05P13B202-develope\\S05P13B202-develope\\backend\\frontend\\src\\views\\contents\\friend_matching\\friendMatching.vue?vue&type=style&index=0&id=df314440&scoped=true&lang=css","dependencies":[{"path":"C:\\test\\S05P13B202-develope\\S05P13B202-develope\\backend\\frontend\\src\\views\\contents\\friend_matching\\friendMatching.vue","mtime":1629187603511},{"path":"C:\\test\\S05P13B202-develope\\S05P13B202-develope\\backend\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\test\\S05P13B202-develope\\S05P13B202-develope\\backend\\frontend\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1628298225000},{"path":"C:\\test\\S05P13B202-develope\\S05P13B202-develope\\backend\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\test\\S05P13B202-develope\\S05P13B202-develope\\backend\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\test\\S05P13B202-develope\\S05P13B202-develope\\backend\\frontend\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1628298225000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgkvKiAjc2Vzc2lvbi10aXRsZSB7CgkJdGV4dC1hbGlnbjogY2VudGVyOwoJfSAqLwoJLnJvb20tY29udGFpbmVyIHsKCQliYWNrZ3JvdW5kOiB3aGl0ZTsKCQloZWlnaHQ6IDEwMCU7CgkJcGFkZGluZy1sZWZ0OiA1cHg7Cgl9Cgkuc2VjdGlvbiB7CgkJcG9zaXRpb246IHJlbGF0aXZlOwoJCWhlaWdodDogMTAwJTsKCX0KCQoJLnNlc3Npb24tbWFpbiB7CgkJaGVpZ2h0OiA4M3ZoOwoJfQoKCS52aWRlby1jb250YWluZXIgewogICAgaGVpZ2h0OiAxMDAlOwoJCW1hcmdpbi1ib3R0b206IDEwcHg7CgkJYm9yZGVyOiAycHggc29saWQgI2JjYmNiYzsKCQkvKiBmaWx0ZXI6IGRyb3Atc2hhZG93KDBweCA0cHggNHB4IHJnYmEoMCwgMCwgMCwgMC4yNSkpOyAqLwoJfQoKCS5zZXNzaW9uLXNpZGViYXIgewoJCXBhZGRpbmc6IDVweDsKCQlib3JkZXItcmFkaXVzOiAzMnB4OwoJCWhlaWdodDogODN2aDsKCQkvKiBmaWx0ZXI6IGRyb3Atc2hhZG93KDBweCA0cHggNHB4IHJnYmEoMCwgMCwgMCwgMC4yNSkpOyAqLwoJfQoKCS5zaWRlYmFyLXRpdGxlIHsKCQloZWlnaHQ6IDN2aDsKCX0KCgkuYm90dG9tLWJhciB7CgkJbWFyZ2luLXRvcDogMTVweDsKCX0KCiAgLnNlbGVjdC1idG4gewogICAgZm9udC1mYW1pbHk6IEJsYWNrSGFuU2FuczsKICAgIGZvbnQtc2l6ZTogMzJweDsKICAgIC8qIGJhY2tncm91bmQ6IDYxQUNGMSAhaW1wb3J0YW50OyAqLwogICAgYm9yZGVyLXJhZGl1czogNDBweCAhaW1wb3J0YW50OwoJCS8qIGZpbHRlcjogZHJvcC1zaGFkb3coMHB4IDRweCA0cHggcmdiYSgwLCAwLCAwLCAwLjI1KSk7ICovCiAgfQo="},{"version":3,"sources":["C:\\test\\S05P13B202-develope\\S05P13B202-develope\\backend\\frontend\\src\\views\\contents\\friend_matching\\friendMatching.vue"],"names":[],"mappings":"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CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EAC1D","file":"C:/test/S05P13B202-develope/S05P13B202-develope/backend/frontend/src/views/contents/friend_matching/friendMatching.vue","sourceRoot":"","sourcesContent":["<template>\n\t<div class=\"room-container\" id=\"main-container\">\n\t\t<div id=\"join\" v-if=\"!isMatched\">\n\t\t\t<div id=\"join-dialog\" class=\"jumbotron vertical-center\">\n\t\t\t\t<h1>대기 페이지</h1>\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<label>Participant</label>\n\t\t\t\t\t\t<input v-model=\"myUserName\" class=\"form-control\" type=\"text\" required>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"text-center\">\n\t\t\t\t\t\t<button class=\"btn btn-lg btn-success\" @click=\"clickButton\">Join!</button>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"section\" v-if=\"isMatched\">\n      <el-row class=\"session-main\">\n        <el-col class=\"video-container\" :span=\"18\">\n\t\t\t\t\t<el-row id=\"session-title\" justify=\"space-between\">\n\t\t\t\t\t\t<div>{{ mySessionId }}</div>\n\t\t\t\t\t\t<div>119 신고기능 추가예정</div>\n\t\t\t\t\t</el-row>\n\t\t\t\t\t<!-- <input class=\"btn btn-large btn-danger\" type=\"button\" id=\"buttonLeaveSession\" @click=\"leaveSession\" value=\"Leave session\"> -->\n          <!-- <el-row id=\"session-header\" justify=\"space-between\">\n\t\t\t\t\t\t<el-col :span=\"5\">\n\t\t\t\t\t\t</el-col>\n\t\t\t\t\t\t<el-col :span=\"5\">\n\t\t\t\t\t\t\t<el-button>\n\t\t\t\t\t\t\t\t<span class=\"iconify\" data-inline=\"false\" data-icon=\"twemoji:ambulance\" style=\"font-size: 40px;\"></span>\n\t\t\t\t\t\t\t\t<span style=\"font-size: 25px;\">119에 신고하기</span>\n\t\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t</el-col>\n          </el-row> -->\n          <!-- <div id=\"main-video\">\n            <user-video :stream-manager=\"mainStreamManager\"/>\n          </div> -->\n\t\t\t\t\t<el-row style=\"height: 100%;\" align=\"middle\">\n\t\t\t\t\t\t<el-col :span=\"12\">\n\t\t\t\t\t\t\t<user-video :stream-manager=\"publisher\" @click=\"updateMainVideoStreamManager(publisher)\"/>\n\t\t\t\t\t\t</el-col>\n\t\t\t\t\t\t<el-col :span=\"12\" v-for=\"sub in subscribers\" :key=\"sub.stream.connection.connectionId\">\n\t\t\t\t\t\t\t<user-video :stream-manager=\"sub\" @click=\"updateMainVideoStreamManager(sub)\"/>\n\t\t\t\t\t\t</el-col>\n\t\t\t\t\t</el-row>\n        </el-col>\n        <el-col class=\"session-sidebar\" :span=\"6\">\n\t\t\t\t\t<el-tabs type=\"card\" @tab-click=\"handleClick\">\n\t\t\t\t\t\t<el-tab-pane label=\"채팅\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<MessageList :msgs=\"msgs\" :senderObj=\"messageSenderObj\" :me=\"publisher\"/>\n\t\t\t\t\t\t\t\t<MessageForm @getMyMsg=\"getMyMsg\"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</el-tab-pane>\n\t\t\t\t\t</el-tabs>\n        </el-col>\n      </el-row>\n\t\t\t<el-row class=\"bottom-bar\" justify=\"center\" align=\"middle\">\n\t\t\t\t<el-col :span=\"8\">\n\t\t\t\t\t<el-button class=\"select-btn\" round @click=\"muteAudio\">\n\t\t\t\t\t\t<div v-if=\"isAudioMuted\">\n\t\t\t\t\t\t\t<span class=\"iconify\" data-inline=\"false\" data-icon=\"ant-design:audio-muted-outlined\" style=\"color: #E25353; font-size: 48px;\"></span>\n\t\t\t\t\t\t\t소리 켜기\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-else>\n\t\t\t\t\t\t\t<span class=\"iconify\" data-inline=\"false\" data-icon=\"ant-design:audio-filled\" style=\"color: #2ec02e; font-size: 48px;\"></span>\n\t\t\t\t\t\t\t<span>소리 끄기</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</el-button>\n\t\t\t\t</el-col>\n\t\t\t\t<el-col :span=\"8\">\n\t\t\t\t\t<el-button class=\"select-btn\" round @click=\"muteVideo\">\n\t\t\t\t\t\t<div v-if=\"isVideoMuted\">\n\t\t\t\t\t\t\t<span class=\"iconify\" data-inline=\"false\" data-icon=\"bx:bxs-video-off\" style=\"color: #e25353; font-size: 48px;\"></span>\n\t\t\t\t\t\t\t<span>비디오 켜기</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-else>\n\t\t\t\t\t\t\t<span class=\"iconify\" data-inline=\"false\" data-icon=\"bx:bxs-video\" style=\"color: #2ec02e; font-size: 48px;\"></span>\n\t\t\t\t\t\t\t<span>비디오 끄기</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</el-button>\n\t\t\t\t</el-col>\n\t\t\t\t<el-col :span=\"8\">\n\t\t\t\t\t<el-button class=\"select-btn\" round @click=\"leaveSession\">\n\t\t\t\t\t\t<span class=\"iconify\" data-inline=\"false\" data-icon=\"icomoon-free:exit\" style=\"color: #e25353; font-size: 48px;\"></span>\n\t\t\t\t\t\t나가기\n\t\t\t\t\t</el-button>\n\t\t\t\t</el-col>\n\t\t\t</el-row>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { OpenVidu } from 'openvidu-browser';\nimport UserVideo from './components/UserVideo';\nimport MessageForm from './components/messageForm';\nimport MessageList from './components/messageList';\n\naxios.defaults.headers.post['Content-Type'] = 'application/json';\nconst OPENVIDU_SERVER_URL = \"https://i5b202.p.ssafy.io:4443\"\nconst OPENVIDU_SERVER_SECRET = \"ssafy\"\nexport default {\n\tname: 'App',\n\tcomponents: {\n\t\tUserVideo,\n    MessageForm,\n    MessageList\n\t},\n\tprops: {\n\t\tmySessionId: {\n\t\t\ttype: String\n\t\t},\n\t},\n\tdata () {\n\t\treturn {\n\t\t\tOV: undefined,\n\t\t\tsession: undefined,\n\t\t\tmainStreamManager: undefined,\n\t\t\tpublisher: undefined,\n\t\t\tsubscribers: [],\n\t\t\tmyUserName: '',\n      msgs: [],\n\t\t\tmessageSenderObj: undefined,\n\t\t\tisVideoMuted: true,\n\t\t\tisAudioMuted: true,\n\t\t\tinChat: true,\n\t\t\tactiveName: 'first',\n\t\t\tisMatched: false,\n\t\t}\n\t},\n\tmounted() {\n\t\tthis.$store.dispatch('root/requestMyDetail', this.$store.getters['root/getMyId'])\n\t\t.then((res) => {\n\t\t\tthis.myUserName = res.data.data.userName\n\t\t\tthis.joinSession()\n\t\t})\n\t},\n\tmethods: {\n\t\tclickButton() {\n\t\t\tthis.muteAudio()\n\t\t\tthis.muteVideo()\n\t\t\tthis.isMatched = !this.isMatched\n\t\t},\n\t\thandleClick(tab, event) {\n\t\t\tconsole.log(tab, event);\n\t\t},\n\t\tmuteAudio() {\n\t\t\tthis.publisher.publishAudio(this.isAudioMuted)\n\t\t\tthis.isAudioMuted = !this.isAudioMuted\n\t\t},\n\t\tmuteVideo() {\n\t\t\tthis.publisher.publishVideo(this.isVideoMuted)\n\t\t\tthis.isVideoMuted = !this.isVideoMuted\n\t\t},\n    getMyMsg (myMsg) {\n      this.session.signal({\n        data: myMsg,\n        to: [],\n        type: 'my-chat'\n      })\n      .then(() => {\n        console.log('메시지성공적으로 보냄')\n      })\n      .catch(error => {\n        console.err(error)\n      })\n    },\n\t\tjoinSession () {\n\t\t\t// --- Get an OpenVidu object ---\n\t\t\tthis.OV = new OpenVidu();\n\t\t\t// --- Init a session ---\n\t\t\tthis.session = this.OV.initSession();\n\t\t\t// --- Specify the actions when events take place in the session ---\n\t\t\t// On every new Stream received...\n\t\t\tthis.session.on('streamCreated', ({ stream }) => {\n\t\t\t\tconst subscriber = this.session.subscribe(stream);\n\t\t\t\tthis.subscribers.push(subscriber);\n\t\t\t});\n\t\t\t// On every Stream destroyed...\n\t\t\tthis.session.on('streamDestroyed', ({ stream }) => {\n\t\t\t\tconst index = this.subscribers.indexOf(stream.streamManager, 0);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tthis.subscribers.splice(index, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// On every asynchronous exception...\n\t\t\tthis.session.on('exception', ({ exception }) => {\n\t\t\t\tconsole.warn(exception);\n\t\t\t});\n\t\t\t// 메세지가 도착 시: 메시지 배열에 {message: 메시지내용, isMe: true/false} 형태로 저장\n      this.session.on('signal', (event) => {\n        const tmp = this.msgs.slice()\n\t\t\t\tlet isMe = false\n\t\t\t\t// console.log('11', this.publisher)\n\t\t\t\t// console.log(\"사용자이름: \",this.publisher.stream.connection.data)\n\t\t\t\t// console.log(\"커넥션아이디: \",this.publisher.stream.connection.connectionId)\n\t\t\t\t// console.log(\"커넥션아이디: \", event.from.connectionId)\n\t\t\t\t// console.log('123',JSON.parse(event.from.data).clientData)\n\t\t\t\tif (event.from.connectionId == this.publisher.stream.connection.connectionId) {\n\t\t\t\t\tisMe = true\n\t\t\t\t}\n        tmp.push({message: event.data, isMe: isMe})\n\t\t\t\tthis.msgs = tmp\n\t\t\t\tthis.messageSenderObj = event.from\n      })\n\n\t\t\tthis.session.on('connectionCreated', (event) => {\n\t\t\t\tconsole.log(\"이벤트 커넥션 발생\", event.connection)\n\t\t\t})\n\n\t\t\t// --- Connect to the session with a valid user token ---\n\t\t\t// 'getToken' method is simulating what your server-side should do.\n\t\t\t// 'token' parameter should be retrieved and returned by your own backend\n\t\t\tthis.getToken(this.mySessionId).then(token => {\n\t\t\t\tthis.session.connect(token, { clientData: this.myUserName })\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t// --- Get your own camera stream with the desired properties ---\n\t\t\t\t\t\tlet publisher = this.OV.initPublisher(undefined, {\n\t\t\t\t\t\t\taudioSource: undefined, // The source of audio. If undefined default microphone\n\t\t\t\t\t\t\tvideoSource: undefined, // The source of video. If undefined default webcam\n\t\t\t\t\t\t\tpublishAudio: true,  \t// Whether you want to start publishing with your audio unmuted or not\n\t\t\t\t\t\t\tpublishVideo: true,  \t// Whether you want to start publishing with your video enabled or not\n\t\t\t\t\t\t\tresolution: '640x480',  // The resolution of your video\n\t\t\t\t\t\t\tframeRate: 30,\t\t\t// The frame rate of your video\n\t\t\t\t\t\t\tinsertMode: 'APPEND',\t// How the video is inserted in the target element 'video-container'\n\t\t\t\t\t\t\tmirror: false       \t// Whether to mirror your local video or not\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.mainStreamManager = publisher;\n\t\t\t\t\t\tthis.publisher = publisher;\n\t\t\t\t\t\t// --- Publish your stream ---\n\t\t\t\t\t\tthis.session.publish(this.publisher);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tconsole.log('There was an error connecting to the session:', error.code, error.message);\n\t\t\t\t\t});\n\t\t\t});\n\t\t\twindow.addEventListener('beforeunload', this.leaveSession)\n\t\t},\n\t\tleaveSession () {\n\t\t\t// --- Leave the session by calling 'disconnect' method over the Session object ---\n\t\t\tif (this.session) this.session.disconnect();\n\t\t\tthis.session = undefined;\n\t\t\tthis.mainStreamManager = undefined;\n\t\t\tthis.publisher = undefined;\n\t\t\tthis.subscribers = [];\n\t\t\tthis.OV = undefined;\n\t\t\twindow.removeEventListener('beforeunload', this.leaveSession);\n\t\t\tthis.$router.push({\n\t\t\t\tname: 'Home'\n\t\t\t})\n\t\t},\n\t\tupdateMainVideoStreamManager (stream) {\n\t\t\tif (this.mainStreamManager === stream) return;\n\t\t\tthis.mainStreamManager = stream;\n\t\t},\n\t\t/**\n\t\t * --------------------------\n\t\t * SERVER-SIDE RESPONSIBILITY\n\t\t * --------------------------\n\t\t * These methods retrieve the mandatory user token from OpenVidu Server.\n\t\t * This behavior MUST BE IN YOUR SERVER-SIDE IN PRODUCTION (by using\n\t\t * the API REST, openvidu-java-client or openvidu-node-client):\n\t\t *   1) Initialize a Session in OpenVidu Server\t(POST /openvidu/api/sessions)\n\t\t *   2) Create a Connection in OpenVidu Server (POST /openvidu/api/sessions/<SESSION_ID>/connection)\n\t\t *   3) The Connection.token must be consumed in Session.connect() method\n\t\t */\n\t\tgetToken (mySessionId) {\n\t\t\treturn this.createSession(mySessionId).then(sessionId => this.createToken(sessionId));\n\t\t},\n\t\t// See https://docs.openvidu.io/en/stable/reference-docs/REST-API/#post-openviduapisessions\n\t\tcreateSession (sessionId) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\taxios\n\t\t\t\t\t.post(`${OPENVIDU_SERVER_URL}/openvidu/api/sessions`, JSON.stringify({\n\t\t\t\t\t\tcustomSessionId: sessionId,\n\t\t\t\t\t}), {\n\t\t\t\t\t\tauth: {\n\t\t\t\t\t\t\tusername: 'OPENVIDUAPP',\n\t\t\t\t\t\t\tpassword: OPENVIDU_SERVER_SECRET,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t.then(response => response.data)\n\t\t\t\t\t.then(data => resolve(data.id))\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tif (error.response.status === 409) {\n\t\t\t\t\t\t\tresolve(sessionId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn(`No connection to OpenVidu Server. This may be a certificate error at ${OPENVIDU_SERVER_URL}`);\n\t\t\t\t\t\t\tif (window.confirm(`No connection to OpenVidu Server. This may be a certificate error at ${OPENVIDU_SERVER_URL}\\n\\nClick OK to navigate and accept it. If no certificate warning is shown, then check that your OpenVidu Server is up and running at \"${OPENVIDU_SERVER_URL}\"`)) {\n\t\t\t\t\t\t\t\tlocation.assign(`${OPENVIDU_SERVER_URL}/accept-certificate`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treject(error.response);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t// See https://docs.openvidu.io/en/stable/reference-docs/REST-API/#post-openviduapisessionsltsession_idgtconnection\n\t\tcreateToken (sessionId) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\taxios\n\t\t\t\t\t.post(`${OPENVIDU_SERVER_URL}/openvidu/api/sessions/${sessionId}/connection`, {}, {\n\t\t\t\t\t\tauth: {\n\t\t\t\t\t\t\tusername: 'OPENVIDUAPP',\n\t\t\t\t\t\t\tpassword: OPENVIDU_SERVER_SECRET,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t.then(response => response.data)\n\t\t\t\t\t.then(data => resolve(data.token))\n\t\t\t\t\t.catch(error => reject(error.response));\n\t\t\t});\n\t\t},\n\t}\n}\n</script>\n\n<style scoped>\n\t/* #session-title {\n\t\ttext-align: center;\n\t} */\n\t.room-container {\n\t\tbackground: white;\n\t\theight: 100%;\n\t\tpadding-left: 5px;\n\t}\n\t.section {\n\t\tposition: relative;\n\t\theight: 100%;\n\t}\n\t\n\t.session-main {\n\t\theight: 83vh;\n\t}\n\n\t.video-container {\n    height: 100%;\n\t\tmargin-bottom: 10px;\n\t\tborder: 2px solid #bcbcbc;\n\t\t/* filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25)); */\n\t}\n\n\t.session-sidebar {\n\t\tpadding: 5px;\n\t\tborder-radius: 32px;\n\t\theight: 83vh;\n\t\t/* filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25)); */\n\t}\n\n\t.sidebar-title {\n\t\theight: 3vh;\n\t}\n\n\t.bottom-bar {\n\t\tmargin-top: 15px;\n\t}\n\n  .select-btn {\n    font-family: BlackHanSans;\n    font-size: 32px;\n    /* background: 61ACF1 !important; */\n    border-radius: 40px !important;\n\t\t/* filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25)); */\n  }\n</style>"]}]}